name: Run unit tests & coverage

on:
    push:
        branches: ['main', 'ci']
    pull_request:
        branches: ['main', 'ci']
        paths-ignore:
            - 'README.md'
            - 'LICENSE'
permissions:
    contents: write

jobs:
    unit-test:
        runs-on: ubuntu-22.04
        env:
            ENV: development
            SERVER_PORT: ${{ secrets.SERVER_PORT }}
            SALT: ${{ secrets.SALT }}
            AT_SECRET: ${{ secrets.AT_SECRET }}
            RT_SECRET: ${{ secrets.RT_SECRET }}
            JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
            MAIL_HOST: ${{ secrets.MAIL_HOST }}
            MAIL_USER: ${{ secrets.MAIL_USER }}
            MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
            MAIL_PORT: ${{ secrets.MAIL_PORT }}
            MAIL_FROM: ${{ secrets.MAIL_FROM }}
            ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
            ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
            ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
            ADMIN_FULLNAME: ${{ secrets.ADMIN_FULLNAME }}
            MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
            MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
            MONGO_DATABASE: ${{ secrets.MONGO_DATABASE }}
            MONGO_APPNAME: ${{ secrets.MONGO_APPNAME }}
            MONGO_PORT: ${{ secrets.MONGO_PORT }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '22'

            - name: Install dependencies (server)
              run: cd server && pnpm install

            - name: Create .env file (server)
              run: |
                  cd server
                  touch .env
                  echo "SERVER_PORT=${SERVER_PORT}" >> .env
                  echo "SALT=${SALT}" >> .env
                  echo "AT_SECRET=${AT_SECRET}" >> .env
                  echo "RT_SECRET=${RT_SECRET}" >> .env
                  echo "JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME}" >> .env
                  echo "MAIL_HOST=${MAIL_HOST}" >> .env
                  echo "MAIL_USER=${MAIL_USER}" >> .env
                  echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> .env
                  echo "MAIL_PORT=${MAIL_PORT}" >> .env
                  echo "MAIL_FROM=${MAIL_FROM}" >> .env
                  echo "ADMIN_PASSWORD=${ADMIN_PASSWORD}" >> .env
                  echo "ADMIN_USERNAME=${ADMIN_USERNAME}" >> .env
                  echo "ADMIN_EMAIL=${ADMIN_EMAIL}" >> .env
                  echo "ADMIN_FULLNAME=${ADMIN_FULLNAME}" >> .env
                  echo "MONGO_USERNAME=${MONGO_USERNAME}" >> .env
                  echo "MONGO_PASSWORD=${MONGO_PASSWORD}" >> .env
                  echo "MONGO_DATABASE=${MONGO_DATABASE}" >> .env
                  echo "MONGO_APPNAME=${MONGO_APPNAME}" >> .env
                  echo "MONGO_PORT=${MONGO_PORT}" >> .env
                  ls -la

            - name: Build server
              run: cd server && timeout 10s pnpm run start:dev || true

            - name: Run unit tests (with Jest)
              run: cd server && pnpm test

            - name: Run test coverage (with Jest)
              run: cd server && pnpm test:cov

            - name: Install jq and bc
              run: |
                  sudo apt-get update
                  sudo apt-get install -y jq bc

            - name: Display test coverage summary
              run: cat server/coverage/coverage-summary.json | jq .

            - name: Check coverage threshold (70% lines)
              run: |
                  COVERAGE=$(cat server/coverage/coverage-summary.json | jq '.total.lines.pct')
                  echo "Line coverage: $COVERAGE%"
                  if (( $(echo "$COVERAGE < 70" | bc -l) )); then
                    echo "Coverage is below threshold of 70%!"
                    exit 1
                  else
                    echo "Coverage meets threshold."
                  fi
                  ls coverage
                  mv coverage/lcov-report coverage_report

            - name: Upload Coverage Report as Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: coverage_report
                  path: coverage_report

    deploy:
        needs: unit-test
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Download Coverage Report Artifact
              uses: actions/download-artifact@v3
              with:
                  name: coverage_report
                  path: coverage_report

            - name: Deploy to GitHub Pages
              uses: JamesIves/github-pages-deploy-action@v4
              with:
                  branch: gh-pages
                  folder: coverage_report
                  clean: true
